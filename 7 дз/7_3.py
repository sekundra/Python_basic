# Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (__add__()),
# вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).Данные методы должны применяться только к
# клеткам и выполнять увеличение, уменьшение, умножение и обычное (не целочисленное) деление клеток, соответственно.
# В методе деления должно осуществляться округление значения до целого числа.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух
# клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток
# больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек
# этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества
# ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку:
# *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку:
# *****\n*****\n*****.


class Cell:
    def __init__(self, cells):
        self.cells = cells

    def __add__(self, other):
        return Cell(self.cells + other.cells)

    def __sub__(self, other):
        if self.cells > other.cells:
            return self.cells - other.cells
        else:
            return(f"Cells can't be subtracted as number of cells will be < 0")

    def __mul__(self, other):
        return Cell(self.cells * other.cells)

    def __truediv__(self, other):
        return Cell(self.cells // other.cells)

    def make_order(self, num):
        string = []
        for i in range(self.cells//num):
            string.append(num * '*')
        string.append(self.cells % num * '*')
        return '\n'.join(string)


cell_1 = Cell(13)
cell_2 = Cell(3)
print(f'Cell 1: {cell_1.cells} \nCell 2: {cell_2.cells}')

print(f'\nCells addition: {(cell_1 + cell_2).cells}')

print(f'\nCells subtraction cell 1 - cell 2: {cell_1 - cell_2}')

print(f'\nCells subtraction cell 2 - cell 1: {cell_2 - cell_1}')

print(f'\nCells multiplication: {(cell_2*cell_1).cells}')

print(f'\nCells division: {(cell_1 / cell_2).cells}')

num = int(input('Enter number of cells to print in line:'))

print(f'\nOrder cell print for n = {num}:\n{cell_1.make_order(num)}')
